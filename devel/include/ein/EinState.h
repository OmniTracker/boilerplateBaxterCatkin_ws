// Generated by gencpp from file ein/EinState.msg
// DO NOT EDIT!


#ifndef EIN_MESSAGE_EINSTATE_H
#define EIN_MESSAGE_EINSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_recognition_msgs/RecognizedObject.h>

namespace ein
{
template <class ContainerAllocator>
struct EinState_
{
  typedef EinState_<ContainerAllocator> Type;

  EinState_()
    : zero_g(0)
    , movement_state(0)
    , patrol_state(0)
    , place_mode(0)
    , patrol_mode(0)
    , idle_mode(0)
    , objects()
    , call_stack()
    , data_stack()
    , words()
    , state_string()  {
    }
  EinState_(const ContainerAllocator& _alloc)
    : zero_g(0)
    , movement_state(0)
    , patrol_state(0)
    , place_mode(0)
    , patrol_mode(0)
    , idle_mode(0)
    , objects(_alloc)
    , call_stack(_alloc)
    , data_stack(_alloc)
    , words(_alloc)
    , state_string(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _zero_g_type;
  _zero_g_type zero_g;

   typedef int32_t _movement_state_type;
  _movement_state_type movement_state;

   typedef int32_t _patrol_state_type;
  _patrol_state_type patrol_state;

   typedef int32_t _place_mode_type;
  _place_mode_type place_mode;

   typedef int32_t _patrol_mode_type;
  _patrol_mode_type patrol_mode;

   typedef int32_t _idle_mode_type;
  _idle_mode_type idle_mode;

   typedef std::vector< ::object_recognition_msgs::RecognizedObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_recognition_msgs::RecognizedObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _call_stack_type;
  _call_stack_type call_stack;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _data_stack_type;
  _data_stack_type data_stack;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _words_type;
  _words_type words;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_string_type;
  _state_string_type state_string;




  typedef boost::shared_ptr< ::ein::EinState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ein::EinState_<ContainerAllocator> const> ConstPtr;

}; // struct EinState_

typedef ::ein::EinState_<std::allocator<void> > EinState;

typedef boost::shared_ptr< ::ein::EinState > EinStatePtr;
typedef boost::shared_ptr< ::ein::EinState const> EinStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ein::EinState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ein::EinState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ein

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/indigo/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/indigo/share/object_recognition_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ein': ['/home/h2r/Desktop/SummerProject/demoStock/catkin_ws/src/ein/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ein::EinState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ein::EinState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ein::EinState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ein::EinState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ein::EinState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ein::EinState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ein::EinState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b800e8474fded9c133c7277e1ccfe9b4";
  }

  static const char* value(const ::ein::EinState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb800e8474fded9c1ULL;
  static const uint64_t static_value2 = 0x33c7277e1ccfe9b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ein::EinState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ein/EinState";
  }

  static const char* value(const ::ein::EinState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ein::EinState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the entire relevant state of the ein system\n\
# please see config.h for details\n\
\n\
int32 zero_g\n\
\n\
int32 movement_state\n\
\n\
int32 patrol_state\n\
\n\
int32 place_mode\n\
\n\
int32 patrol_mode\n\
\n\
int32 idle_mode\n\
\n\
object_recognition_msgs/RecognizedObject[] objects\n\
\n\
string[] call_stack\n\
\n\
string[] data_stack\n\
\n\
string[] words\n\
\n\
string state_string\n\
\n\
================================================================================\n\
MSG: object_recognition_msgs/RecognizedObject\n\
##################################################### HEADER ###########################################################\n\
\n\
# The header frame corresponds to the pose frame, NOT the point_cloud frame.\n\
Header header\n\
\n\
################################################## OBJECT INFO #########################################################\n\
\n\
# Contains information about the type and the position of a found object\n\
# Some of those fields might not be filled because the used techniques do not fill them or because the user does not\n\
# request them\n\
\n\
# The type of the found object\n\
object_recognition_msgs/ObjectType type\n\
\n\
#confidence: how sure you are it is that object and not another one.\n\
# It is between 0 and 1 and the closer to one it is the better\n\
float32 confidence\n\
\n\
################################################ OBJECT CLUSTERS #######################################################\n\
\n\
# Sometimes you can extract the 3d points that belong to the object, in the frames of the original sensors\n\
# (it is an array as you might have several sensors)\n\
sensor_msgs/PointCloud2[] point_clouds\n\
\n\
# Sometimes, you can only provide a bounding box/shape, even in 3d\n\
# This is in the pose frame\n\
shape_msgs/Mesh bounding_mesh\n\
\n\
# Sometimes, you only have 2d input so you can't really give a pose, you just get a contour, or a box\n\
# The last point will be linked to the first one automatically\n\
geometry_msgs/Point[] bounding_contours\n\
\n\
#################################################### POSE INFO #########################################################\n\
\n\
# This is the result that everybody expects : the pose in some frame given with the input. The units are radian/meters\n\
# as usual\n\
geometry_msgs/PoseWithCovarianceStamped pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: object_recognition_msgs/ObjectType\n\
################################################## OBJECT ID #########################################################\n\
\n\
# Contains information about the type of a found object. Those two sets of parameters together uniquely define an\n\
# object\n\
\n\
# The key of the found object: the unique identifier in the given db\n\
string key\n\
\n\
# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding\n\
# database. E.g., in object_recognition, it can look like: \"{'type':'CouchDB', 'root':'http://localhost'}\"\n\
# There is no conventional format for those parameters and it's nice to keep that flexibility.\n\
# The object_recognition_core as a generic DB type that can read those fields\n\
# Current examples:\n\
# For CouchDB:\n\
#   type: 'CouchDB'\n\
#   root: 'http://localhost:5984'\n\
#   collection: 'object_recognition'\n\
# For SQL household database:\n\
#   type: 'SqlHousehold'\n\
#   host: 'wgs36'\n\
#   port: 5432\n\
#   user: 'willow'\n\
#   password: 'willow'\n\
#   name: 'household_objects'\n\
#   module: 'tabletop'\n\
string db\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: shape_msgs/Mesh\n\
# Definition of a mesh\n\
\n\
# list of triangles; the index values refer to positions in vertices[]\n\
MeshTriangle[] triangles\n\
\n\
# the actual vertices that make up the mesh\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: shape_msgs/MeshTriangle\n\
# Definition of a triangle's vertices\n\
uint32[3] vertex_indices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovarianceStamped\n\
# This expresses an estimated pose with a reference coordinate frame and timestamp\n\
\n\
Header header\n\
PoseWithCovariance pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::ein::EinState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ein::EinState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zero_g);
      stream.next(m.movement_state);
      stream.next(m.patrol_state);
      stream.next(m.place_mode);
      stream.next(m.patrol_mode);
      stream.next(m.idle_mode);
      stream.next(m.objects);
      stream.next(m.call_stack);
      stream.next(m.data_stack);
      stream.next(m.words);
      stream.next(m.state_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EinState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ein::EinState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ein::EinState_<ContainerAllocator>& v)
  {
    s << indent << "zero_g: ";
    Printer<int32_t>::stream(s, indent + "  ", v.zero_g);
    s << indent << "movement_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.movement_state);
    s << indent << "patrol_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.patrol_state);
    s << indent << "place_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.place_mode);
    s << indent << "patrol_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.patrol_mode);
    s << indent << "idle_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idle_mode);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_recognition_msgs::RecognizedObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "call_stack[]" << std::endl;
    for (size_t i = 0; i < v.call_stack.size(); ++i)
    {
      s << indent << "  call_stack[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.call_stack[i]);
    }
    s << indent << "data_stack[]" << std::endl;
    for (size_t i = 0; i < v.data_stack.size(); ++i)
    {
      s << indent << "  data_stack[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_stack[i]);
    }
    s << indent << "words[]" << std::endl;
    for (size_t i = 0; i < v.words.size(); ++i)
    {
      s << indent << "  words[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.words[i]);
    }
    s << indent << "state_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_string);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EIN_MESSAGE_EINSTATE_H
